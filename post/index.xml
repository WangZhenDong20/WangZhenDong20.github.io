<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on SleepingFace Blog</title><link>https://wangzhendong20.github.io/post/</link><description>Recent content in Posts on SleepingFace Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 19 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wangzhendong20.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>leetcode打卡 - 2024/8/19</title><link>https://wangzhendong20.github.io/2024/08/19/2024-08-19-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240819/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/19/2024-08-19-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240819/</guid><description>今天主要是图论的题目，学习了二分图，也把https://wangzhendong20.github.io/2024/07/23/leetco</description></item><item><title>Linux常用命令及常见问题</title><link>https://wangzhendong20.github.io/2024/08/19/2024-08-19-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/19/2024-08-19-Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid><description>Linux常用命令及常见问题 前言： 基本上每次都会查一遍命令，就在这里做个简单的记录吧。 1. ls 用途： 列出目录内容 使用场景： 查看当前目录下的文件和</description></item><item><title>基于 Spring Cache 注解 + Redis 实现对数据字典的自动缓存</title><link>https://wangzhendong20.github.io/2024/08/19/2024-08-19-%E5%9F%BA%E4%BA%8ESpringCache%E6%B3%A8%E8%A7%A3%E5%92%8CRedis%E5%AE%9E%E7%8E%B0%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BC%93%E5%AD%98/</link><pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/19/2024-08-19-%E5%9F%BA%E4%BA%8ESpringCache%E6%B3%A8%E8%A7%A3%E5%92%8CRedis%E5%AE%9E%E7%8E%B0%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8%E7%9A%84%E8%87%AA%E5%8A%A8%E7%BC%93%E5%AD%98/</guid><description>基于 Spring Cache 注解 + Redis 实现对数据字典的自动缓存 前言： 基于 Spring Cache 注解 + Redis 实现对数据字典的自动缓存，并通过自定义 Redis Key Generator 来根据类和方法自动生成 key。 1. 实</description></item><item><title>leetcode打卡 - 2024/8/18</title><link>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240818/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240818/</guid><description>前言：今天做了两道相似的题目，都是跟字典序相关的，但是都不会呜呜呜。 440. 字典序的第K小数字 x 算术评级：8 困难 /** * BFS+DFS * 考虑前缀树。 * 字典序会给我</description></item><item><title>设计模式之适配器模式</title><link>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid><description>适配器模式（Adapter Pattern） 概述： 适配器模式是一种结构型设计模式，它允许你将一个类的接口转换成客户端所期待的另一个接口，使得原</description></item><item><title>leetcode打卡 - 2024/8/17</title><link>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240817/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240817/</guid><description>658. 找到 K 个最接近的元素 算术评级：4 中等 堆 /** * heap * @param arr * @param k * @param x * @return */ public List&amp;lt;Integer&amp;gt; findClosestElements(int[] arr, int k, int x) { PriorityQueue&amp;lt;int[]&amp;gt; pq = new PriorityQueue&amp;lt;&amp;gt;(k,(a,b) -&amp;gt; b[1]-a[1]); for (int i = 0; i &amp;lt; arr.length; i++) { if (pq.size() &amp;gt;= k) { if (Math.abs(arr[i] - x)</description></item><item><title>设计模式之装饰者模式</title><link>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>装饰者模式（Decorator Pattern） 概述： 装饰者模式是一种结构型设计模式，它允许你通过将对象放入包含行为的特殊封装对象中来为原对象</description></item><item><title>设计模式之责任链模式</title><link>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid><description>责任链模式（Chain of Responsibility Pattern） 概述： 责任链模式是一种行为型设计模式，它允许多个对象有机会处理请求，将这些对象连成一条链，直到有对</description></item><item><title>leetcode打卡 - 2024/8/15</title><link>https://wangzhendong20.github.io/2024/08/15/2024-08-15-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240815/</link><pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/15/2024-08-15-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240815/</guid><description>264. 丑数 II × 算数评级：5 中等 堆 /** * 每个丑数都可以用较小的丑数乘以2，3，5得到，因此可以用优先队列来维护 * 小顶堆维护丑数，弹出的第n个数就是第</description></item><item><title>leetcode打卡 - 2024/8/14</title><link>https://wangzhendong20.github.io/2024/08/14/2024-08-14-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240814/</link><pubDate>Wed, 14 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/14/2024-08-14-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9520240814/</guid><description>373. 查找和最小的 K 对数字 × /** * 最小的k对数只能是nums1[0]或nums2[0]中选一个，然后再从其它的里面选择小的。 * 所以可以用小根堆来存</description></item><item><title>每日一题 - 2024/8/9</title><link>https://wangzhendong20.github.io/2024/08/09/2024-08-09-leetcodeDaily4/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/09/2024-08-09-leetcodeDaily4/</guid><description>每日一题 - 2024/8/9 3132. 找出与数组相加的整数 II 原来做周赛的时候做过一次了。 代码参考：https://leetcode.cn/problems/find</description></item><item><title>Go学习笔记</title><link>https://wangzhendong20.github.io/2024/08/07/2024-8-7-Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 07 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/07/2024-8-7-Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid><description>Go学习笔记 翻到了去年学习go时候的笔记，记录一下哈哈哈。 **hello world! ** package main import &amp;#34;fmt&amp;#34; // import fm &amp;#34;fmt&amp;#34; // 取别名 func main() { fm.Println(&amp;#34;hello, world&amp;#34;) } 基本结构和要素 导入多个包时： import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) 函</description></item><item><title>行测 - 资料分析笔记</title><link>https://wangzhendong20.github.io/2024/08/05/2024-8-5-%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 05 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/05/2024-8-5-%E8%B5%84%E6%96%99%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</guid><description>1.实用速算技巧 1.1 加法技巧&amp;ndash;尾数法、高位叠加法、削峰填谷法 1.2 减法技巧&amp;ndash;整数基准值法、“21”“12”分段法 1.3 乘法技巧</description></item><item><title>Spring Retry &amp; Guava Retry - 快速入门</title><link>https://wangzhendong20.github.io/2024/08/04/2024-8-4-SpringRetry&amp;GuavaRetry/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/04/2024-8-4-SpringRetry&amp;GuavaRetry/</guid><description>Spring Retry &amp;amp; Guava Retry Spring Retry Spring Retry简介 Spring Retry 为 Spring 应用程序提供了声明性重试支持。它主要是针对可能抛出异常的一些调用操作，进行有策略的重试。 快速入门 这里以</description></item><item><title>每日一题 - 2024/8/4</title><link>https://wangzhendong20.github.io/2024/08/04/2024-08-04-leetcodeDaily3/</link><pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/04/2024-08-04-leetcodeDaily3/</guid><description>每日一题 - 2024/8/4 572. 另一棵树的子树 经典题目 思路 判断是否是一棵树的子树，那么我们首先想到如何判断两个树是相同的。 判断两个树是否相同有五种情况： 左右子</description></item><item><title>SDK开发 - 快速入门</title><link>https://wangzhendong20.github.io/2024/08/03/2024-8-3-SDK%E5%BC%80%E5%8F%91/</link><pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/03/2024-8-3-SDK%E5%BC%80%E5%8F%91/</guid><description>SDK开发 前言：今天尝试将SleepingFace BI项目中的功能开发为SDK，这样调用者只需要引入依赖，配置ak/sk，然后调用API就可</description></item><item><title>每日一题 - 2024/8/3</title><link>https://wangzhendong20.github.io/2024/08/03/2024-08-03-leetcodeDaily2/</link><pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/03/2024-08-03-leetcodeDaily2/</guid><description>每日一题 - 2024/8/3 [3143. 正方形中的最多点数] 方法一 先用TreeMap记录每个范围正方形内的所有字符， 之后遍历TreeMap，如果遇到相同字符就停止统计</description></item><item><title>每日一题 - 2024/8/2</title><link>https://wangzhendong20.github.io/2024/08/02/2024-08-02-leetcodeDaily1/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/02/2024-08-02-leetcodeDaily1/</guid><description>每日一题 - 2024/8/2 3128. 直角三角形 题目介绍 给你一个二维 int 矩阵 grid 。 请你返回使用 grid 中的 3 个元素可以构建的 直角三角形 数目，且满足 3 个元素值 都 为 1 。 注意： 如果</description></item><item><title>利用AOP实现权限校验和请求响应日志输出</title><link>https://wangzhendong20.github.io/2024/08/01/2024-8-1-AOP/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/01/2024-8-1-AOP/</guid><description>利用AOP实现权限校验和请求响应日志输出 前言： 记录一下在SleepingFace BI项目里利用AOP做了什么？ 权限校验 请求响应日志输出 1. AO</description></item><item><title>策略模式+工厂模式实现多种文件类型上传处理</title><link>https://wangzhendong20.github.io/2024/07/31/2024-7-31-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/31/2024-7-31-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid><description>策略模式+工厂模式实现多种文件类型上传处理 前言： 记录在SleepingFace BI项目里的一个小优化，采用策略模式+工厂模式代替了if-el</description></item><item><title>Git常用命令</title><link>https://wangzhendong20.github.io/2024/07/29/2024-7-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Mon, 29 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/29/2024-7-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>Git常用命令 前言： 总是使用idea或者VsCode当中的Git直接操作，但是有时候需要用到git命令的时候往往忘记了就需要现查，于是乎就做</description></item><item><title>利用LLaMA-Factory微调Qwen2-快速入门</title><link>https://wangzhendong20.github.io/2024/07/25/2024-7-25-LLM-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Thu, 25 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/25/2024-7-25-LLM-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>利用LLaMA-Factory微调Qwen2-快速入门 0. Qwen2系列模型基础信息 我们将采用Qwen2-7B来进行微调 1.配置环境 (1)Au</description></item><item><title>代码随想录+leetcode笔记</title><link>https://wangzhendong20.github.io/2024/07/23/leetcode-note/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/23/leetcode-note/</guid><description>一些工具类方法 Collections 排序操作 void reverse(List list)//反转 void shuffle(List list)//随机排序 void sort(List list)//按自然排序的升序排序 void sort(List list, Comparator c)//定制排序，由C</description></item><item><title>Welcome to SleepingFace Blog</title><link>https://wangzhendong20.github.io/2024/07/22/hello-world/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/22/hello-world/</guid><description>“Yeah It&amp;rsquo;s on. ” Hello World!</description></item></channel></rss>