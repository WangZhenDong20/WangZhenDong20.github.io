<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>设计模式 on SleepingFace Blog</title><link>https://wangzhendong20.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 设计模式 on SleepingFace Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 20 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wangzhendong20.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>设计模式之观察者模式</title><link>https://wangzhendong20.github.io/2024/08/20/2024-08-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/20/2024-08-20-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="观察者模式observer-pattern">观察者模式（Observer Pattern）&lt;/h1>
&lt;h2 id="概述">概述：&lt;/h2>
&lt;p>观察者模式（Observer Pattern）是一种行为设计模式，它定义了一种一对多的依赖关系，使得一个对象状态的改变可以通知到所有依赖它的对象，并且自动更新。这种模式特别适用于需要通知多个对象状态变化的场景，常用于实现事件驱动的系统。&lt;/p></description></item><item><title>设计模式之适配器模式</title><link>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link><pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/18/2024-08-18-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="适配器模式adapter-pattern">适配器模式（Adapter Pattern）&lt;/h1>
&lt;h2 id="概述">概述：&lt;/h2>
&lt;p>适配器模式是一种结构型设计模式，它允许你将一个类的接口转换成客户端所期待的另一个接口，使得原本由于接口不兼容而不能一起工作的类可以一起工作。&lt;/p></description></item><item><title>设计模式之装饰者模式</title><link>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="装饰者模式decorator-pattern">装饰者模式（Decorator Pattern）&lt;/h1>
&lt;h2 id="概述">概述：&lt;/h2>
&lt;p>装饰者模式是一种结构型设计模式，它允许你通过将对象放入包含行为的特殊封装对象中来为原对象增加新的行为。这些封装对象被称为装饰者。&lt;/p></description></item><item><title>设计模式之责任链模式</title><link>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/08/17/2024-08-17-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="责任链模式chain-of-responsibility-pattern">责任链模式（Chain of Responsibility Pattern）&lt;/h1>
&lt;h2 id="概述">概述：&lt;/h2>
&lt;p>责任链模式是一种行为型设计模式，它允许多个对象有机会处理请求，将这些对象连成一条链，直到有对象处理它为止。请求在链上传递，直到链上的某个对象处理该请求。&lt;/p></description></item><item><title>策略模式+工厂模式实现多种文件类型上传处理</title><link>https://wangzhendong20.github.io/2024/07/31/2024-7-31-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link><pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate><guid>https://wangzhendong20.github.io/2024/07/31/2024-7-31-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="策略模式工厂模式实现多种文件类型上传处理">策略模式+工厂模式实现多种文件类型上传处理&lt;/h1>
&lt;p>&lt;strong>前言：&lt;/strong> 记录在&lt;em>SleepingFace BI&lt;/em>项目里的一个小优化，采用&lt;em>策略模式+工厂模式&lt;/em>代替了&lt;em>if-else&lt;/em>实现多种文件类型的上传处理。&lt;/p></description></item></channel></rss>